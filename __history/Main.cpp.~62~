//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Main.h"
#include "BackEnd.h"
#include <System.DateUtils.hpp>


//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
THospital Hospital[100];

TfrMain *frMain;
//---------------------------------------------------------------------------
__fastcall TfrMain::TfrMain(TComponent* Owner)
	: TForm(Owner)
{
	lblData->Color = clGreen;
	imgTab1->Picture->LoadFromFile("..//..//Images//first_tab.jpg");
	lblInfo->Caption = " #No \t                 Id number  \t \t      Initials \t        Surname \t   FileNumber \t    Diagnose        Gender  ";
	lblWait->Visible = false;
	 strInfo->Panels->Items[0]->Text = " Date started : " + FormatDateTime("dd mmmm yyyy hh:mm:ss ",Now());
	 pgControl->ActivePageIndex =0;
	 btnDisplayGender->Enabled = false;
	 btnSortListBox-> Enabled = false;
	 btnInstantiate->Visible = false;
}
//---------------------------------------------------------------------------
//User defined method
AnsiString getValueByField(AnsiString line,int fieldNr,char delim)
{
	AnsiString field;
	line += delim;
	int pos;

	for(int x=1;x<=fieldNr;x++)
	{
		pos = line.Pos(delim);
		field = line.SubString(1,pos-1);
        line.Delete(1,pos);

	}
    return field;
}
//---------------------------------------------------------------------------


void __fastcall TfrMain::btnLoadInfoClick(TObject *Sender)
{
	lstInfo->Items->LoadFromFile("..//..//DataF//patients_info.txt");
	AnsiString Ln;

	for(int i=0;i<lstInfo->Count;i++)
	{
	   Ln = lstInfo->Items->Strings[i];
	   while(Ln.Pos("#")>0)
	   {
		   Ln[Ln.Pos("#")] = '\t';
	   }
	   lstInfo-> Items->Strings[i] = " "+IntToStr(i+1)+'\t'+Ln;

		strInfo->Panels->Items[1]->Text = IntToStr(lstInfo->Count) + " Patients Counted" ;
	   btnDisplayGender->Enabled = true;
	}
}
//---------------------------------------------------------------------------
void __fastcall TfrMain::btnDisplayGenderClick(TObject *Sender)
{
	  AnsiString Id ,Ln,gender;
	int genderNo;

	for(int i=0;i<lstInfo->Count;i++)
	{
		Ln = lstInfo->Items->Strings[i];
		Id =  getValueByField(Ln,2,'\t');
		genderNo = StrToInt(Id.SubString(7,1));
		if(genderNo<5)
		{
			gender = "Female";
		}
		else
		{
				gender = "Male";
		}

		lstInfo->Items->Strings[i]= Ln +'\t'+ gender;

	}
    btnSortListBox-> Enabled = true;
}
//---------------------------------------------------------------------------
double calcAge(AnsiString DOB)
{
	// Parse year, month, and day components from input string
	DOB = "19"+DOB;
	int year = StrToInt(DOB.SubString(1, 4));
    int month = StrToInt(DOB.SubString(5, 2));
	int day = StrToInt(DOB.SubString(7, 2));

	// Check for valid year value
    if (year < 1900 || year > 9999) {
		throw Exception("Invalid year value");
    }

	// Check for valid month value
	if (month < 1 || month > 12) {
		throw Exception("Invalid month value");
	}

    // Check for valid day value
	if (day < 1 || day > MonthDays[IsLeapYear(year)][month]) {
        throw Exception("Invalid day value");
	}

    // Construct TDateTime object from components
	TDateTime birthDate = EncodeDate(year, month, day);

	// Calculate age in years
    double age = YearsBetween(birthDate, Date());

	return age;
}
//------------------------------------------------------------------------
TDateTime calcDOB(AnsiString id)
{
	int year, month, day;

    // Check length of year value and adjust as needed
	if (id.Length() == 10) {
        year = StrToInt(id.SubString(1, 4));
    } else {
		year = StrToInt("19" + id.SubString(1, 2));
    }

	// Extract month and day values
    month = StrToInt(id.SubString(3, 2));
	day = StrToInt(id.SubString(5, 2));


    TDateTime dob = EncodeDate(year, month, day);

    return dob;
}





void __fastcall TfrMain::lstInfoClick(TObject *Sender)
{
   AnsiString Ln,Id,ini,surname,fileNo,condition ,gender;
	int genderNo;
	double age;


		 if (lstInfo->ItemIndex >= 0)
		{
		AnsiString Ln = lstInfo->Items->Strings[lstInfo->ItemIndex];
		AnsiString Id = getValueByField(Ln, 2, '\t');
		AnsiString ini = getValueByField(Ln, 3, '\t');
		AnsiString surname = getValueByField(Ln, 4, '\t');
		AnsiString fileNo =  getValueByField(Ln,5,'\t');
		AnsiString condition =  getValueByField(Ln,6,'\t');

		 age = calcAge(Id);

		TDateTime dob = calcDOB(Id.SubString(1,6));
		 AnsiString dobStr = FormatDateTime(" yyyy mmmm dd", dob);
		MessageDlg("This is " + ini + " " + surname + " " + age + " years old. Born in "+ dobStr+" file number "+
		fileNo+" Diagnosed with "+condition, mtInformation, TMsgDlgButtons() << mbOK, 0);

		}


}
//---------------------------------------------------------------------------
void __fastcall TfrMain::btnSortListBoxClick(TObject *Sender)
{
	bool swap = true;
	int iEnd = lstInfo->Count-1;
	while (swap)
	{
		swap = false;
			for (int c=0; c < iEnd; c++)
			{
				AnsiString ln1 = lstInfo->Items->Strings[c];
				AnsiString condition = getValueByField(ln1,6, '\t')+ getValueByField( ln1,7, '\t');
				AnsiString ln2 = lstInfo->Items->Strings[c+1];
				AnsiString gender = getValueByField(ln2,6 ,'\t')
				+ getValueByField( ln2,7, '\t');
				if (condition > gender)
				{

				AnsiString temp = lstInfo->Items->Strings[c];
				lstInfo->Items->Strings[c] =
				lstInfo->Items->Strings[c+1];
				lstInfo->Items->Strings[c+1] = temp;
				swap = true;
				}
			}
			iEnd--;
	}

	Sleep(200);
	Application->ProcessMessages();
	lstInfo->Refresh();
	btnInstantiate->Visible = true;

}
//---------------------------------------------------------------------------

void __fastcall TfrMain::btnInstantiateClick(TObject *Sender)
{
	AnsiString Ln,Id,ini,surname,fileNo,condition ,gender;
	int genderNo;

	for(int i=0;i<lstInfo->Count;i++)
	{
		Ln = lstInfo->Items->Strings[i];
		Id =  getValueByField(Ln,2,'\t');
		ini=  getValueByField(Ln,3,'\t');
		surname =  getValueByField(Ln,4,'\t');
		fileNo =  getValueByField(Ln,5,'\t');
		condition =  getValueByField(Ln,6,'\t');
		gender =  getValueByField(Ln,7,'\t');

		Hospital[i].setHospital(Id, ini,surname,fileNo, condition, gender);
		 lblWait->Visible = true;
		lblObjects->Caption = IntToStr(i+1);

		Sleep(200);

		Application->ProcessMessages();
		lblWait->Visible = false;

		 strInfo->Panels->Items[1]->Text = IntToStr(lstInfo->Count) + " Patients instatiated" ;
	}
}
//---------------------------------------------------------------------------


void __fastcall TfrMain::btnPrepStrgClick(TObject *Sender)
{
	  //
}
//---------------------------------------------------------------------------

void __fastcall TfrMain::pgControlChange(TObject *Sender)
{

	imgTab2->Picture->LoadFromFile("..//..//Images//imgTab2.jpg");
	strgHospital->ColCount = 5;
	AnsiString header[5] =
	{"Nr","ID","Initials","Surname","FIle Number",};
	for (int k = 0; k < 5; k++)
	strgHospital->Cells[k][0] = header[k];

	strgHospital->ColWidths[0] = 50;
	strgHospital->ColWidths[1] = 120;
	strgHospital->ColWidths[2] = 110;
	strgHospital->ColWidths[3] = 100;
	strgHospital->ColWidths[4] = 130;

	cmbxGender->Items->Add ("Male");
	cmbxGender->Items->Add ("Female");
	cmbxCon->Items->Add("HIV");
	cmbxCon->Items->Add("Flue");
	cmbxCon->Items->Add("Malaria");
	cmbxCon->Items->Add("TB");

	if ((cmbxCon->ItemIndex > -1) && (cmbxGender->ItemIndex > -1))
	{
		 btnSort->Enabled = true;
	}

	strgSummary->ColCount = 3;
	strgSummary->ColCount = 4;
	AnsiString head[3] =
	{"Conditions","Males","Female"};
	for (int k = 0; k < 3; k++)
	strgSummary->Cells[k][0] = head[k];

	strgSummary->ColWidths[0] = 100;
	strgSummary->ColWidths[1] = 70;
	strgSummary->ColWidths[2] = 70;


	strgSummary->Cells[0][1] = " HIV";
	strgSummary->Cells[0][2] = " Flue";
	strgSummary->Cells[0][3] = " Malaria";
	strgSummary->Cells[0][4] = " TB";

}
//---------------------------------------------------------------------------



void __fastcall TfrMain::btnSortClick(TObject *Sender)
{
   AnsiString Ln,Id,ini,surname,fileNo,condition ,gen;
	int genderNo;
	AnsiString gender = cmbxGender->Text;
	AnsiString con = cmbxCon->Text;

	int count =0;

	for(int i=0;i<100;i++)
	{
		 Hospital[i].getHospital(Id, ini,surname,fileNo, condition, gen);

		 if((gender == gen )&& (con == condition))
		 {
			 count++;
			 strgHospital->Cells[0][count] = IntToStr(count);
			strgHospital->Cells[1][count] = Id;
			strgHospital->Cells[2][count] = ini;
			strgHospital->Cells[3][count] = surname;
			strgHospital->Cells[4][count] = fileNo;

		 }
		 strgHospital->RowCount = count+1;
	}
	strbrTab2->Panels->Items[1]->Text = IntToStr(strgHospital->RowCount-1)+" " + (gender = cmbxGender->Text)+ " diagnosed with " +(con = cmbxCon->Text)+" found" ;
}
//---------------------------------------------------------------------------
void __fastcall TfrMain::btnReportClick(TObject *Sender)
{

	TImage *pic = new TImage(this);
	pic->Parent = tbs5;
	pic->Top = 15;
	pic->Left = memTReport->Left-80;
	pic->AutoSize = true;
	pic->Picture->LoadFromFile("..\\..\\Images\\tbs5.jpg");


	memTReport->Clear();
	  memTReport->Lines->Add("Patients "+cmbxGender->Text+"--"+cmbxCon->Text);
	memTReport->Lines->Add("_________________________________________________");
	memTReport->Lines->Add("_________________________________________________");
	memTReport->Lines->Add("Surname , Initials  \t            ID     \t File Number");
	memTReport->Lines->Add("===============\t ============== \t ========");
	int i, selected = StrToInt(strgHospital->RowCount);
	for (i = 1; i <= selected; i++)
	{
		AnsiString lnR = strgHospital->Cells[3][i]+" , ";
		lnR += strgHospital->Cells[2][i] + " \t ";
		lnR += strgHospital->Cells[1][i]+" \t ";
		lnR += strgHospital->Cells[4][i];

		memTReport->Lines->Add(lnR);
	}
	memTReport->Lines->Add("_______________________________________________");
	memTReport->Lines->Add("Total Number of "+cmbxGender->Text+"s Diagnosed with "+ cmbxCon->Text +" = "+(strgHospital->RowCount-1) );
	ShowMessage("Report Created!! , See Tabsheet 5 ");

}
//-------------------------------------------------------------------------------
void __fastcall TfrMain::btnSummaryClick(TObject *Sender)
{
     AnsiString Ln,Id,ini,surname,fileNo,condition ,gen;
	int genderNo;
	AnsiString gender = cmbxGender->Text;
	AnsiString con = cmbxCon->Text;

	int count =0;
	int MalariaF=0;int MalariaM =0;
	int HIVM=0;int HIVF =0;
	int FlueF=0;int FlueM =0;
	int TBM=0;int TBF =0;


	for(int i=0;i<100;i++)
	{
		 Hospital[i].getHospital(Id, ini,surname,fileNo, condition, gen);

		 if(gen == "Male" )
		 {
			 count++;
			 if(condition=="Malaria")
			 {
				MalariaM++;
			 }
			  if(condition=="HIV")
			 {
				HIVM++;
			 }
			  if(condition=="Flue")
			 {
				FlueM++;
			 }
			  if(condition=="TB")
			 {
				TBM++;
			 }


		 }
		 else
		 {
              count++;
			 if(condition=="Malaria")
			 {
				MalariaF++;
			 }
			  if(condition=="HIV")
			 {
				HIVF++;
			 }
			  if(condition=="Flue")
			 {
				FlueF++;
			 }
			  if(condition=="TB")
			 {
				TBF++;
			 }

		 }

		 strgSummary->Cells[1][1] = StrToInt(HIVM);
		  strgSummary->Cells[1][2] = StrToInt(FlueM);
		   strgSummary->Cells[1][3] = StrToInt(MalariaM);
			strgSummary->Cells[1][4] =  StrToInt(TBM);

			 strgSummary->Cells[2][1] = StrToInt(HIVF);
		  strgSummary->Cells[2][2] =   StrToInt(FlueF);
		   strgSummary->Cells[2][3] =  StrToInt(MalariaF);
			strgSummary->Cells[2][4] = StrToInt(TBF);
	}
}
//-----------------------------------------------------------------------

void __fastcall TfrMain::btnGraphClick(TObject *Sender)
{
    const int size = 4;
	TPanel *male_graph[size],*female_graph[size];

	for(int i=0; i<size; i++)
	{
		male_graph[i] = new TPanel(this);
		male_graph[i]->Parent = pnlGraphs;
		male_graph[i]->Width = 30;
		male_graph[i]->Left = 115 + i * 80;
		male_graph[i]->Height = StrToInt(strgSummary->Cells[1][i+1]) * 19;
		male_graph[i]->Top = 64 + (211 - male_graph[i]->Height);
		male_graph[i]->Caption = strgSummary->Cells[1][i+1];
		male_graph[i]->Tag = 77;
		male_graph[i]->Color = clAqua;
		male_graph[i]->ParentBackground = false;
	}

	Application->ProcessMessages();
	Sleep(500);

	for(int i=0; i<size; i++)
	{
		female_graph[i] = new TPanel(this);
		female_graph[i]->Parent = pnlGraphs;
		female_graph[i]->Width = 30;
		female_graph[i]->Left = 138 + i * 80;
		female_graph[i]->Height = StrToInt(strgSummary->Cells[2][i+1]) * 19;
		female_graph[i]->Top = 64 + (211 - female_graph[i]->Height);
		female_graph[i]->Caption = strgSummary->Cells[2][i+1];
		female_graph[i]->Tag = 11;
		female_graph[i]->Color = clLime;
		female_graph[i]->ParentBackground = false;
	}
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------


void __fastcall TfrMain::btnDelMClick(TObject *Sender)
{
     int controls = pnlGraphs->ControlCount;

	for(int i=controls-1; i>=0; i--)
	{
		if(pnlGraphs->Controls[i]->Tag == 77)
		{
			delete pnlGraphs->Controls[i];

			pnlGraphs->Refresh();
			Application->ProcessMessages();
			Sleep(150);
		}

	}
}
//---------------------------------------------------------------------------

void __fastcall TfrMain::btnDelFClick(TObject *Sender)
{
	int controls = pnlGraphs->ControlCount;

	for(int i=controls-1; i>=0; i--)
	{
		if(pnlGraphs->Controls[i]->Tag == 11)
		{
			delete pnlGraphs->Controls[i];

			pnlGraphs->Refresh();
			Application->ProcessMessages();
			Sleep(150);
		}

	}
}


void __fastcall TfrMain::memTReportChange(TObject *Sender)
{
    //
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------

void __fastcall TfrMain::btnSaveClick(TObject *Sender)
{

	TStringList *csvLines = new TStringList;
    int i, selected = StrToInt(strgHospital->RowCount);
    csvLines->Add("Surname,Initials,ID,File Number");
    for (i = 1; i <= selected; i++)
    {
        AnsiString lnR = strgHospital->Cells[3][i] + ",";
        lnR += strgHospital->Cells[2][i] + ",";
        lnR += strgHospital->Cells[1][i] + ",";
		lnR += strgHospital->Cells[4][i];
		csvLines->Add(lnR);
    }

    // Save the CSV file using a SaveDialog
	TSaveDialog *saveDlg = new TSaveDialog(this);
    saveDlg->DefaultExt = "csv";
    saveDlg->Filter = "CSV files (*.csv)|*.csv";
    saveDlg->Options.Clear();
    saveDlg->Options << ofHideReadOnly << ofNoReadOnlyReturn << ofPathMustExist;
    saveDlg->Title = "Save Report As CSV File";
    if (saveDlg->Execute())
    {
        csvLines->SaveToFile(saveDlg->FileName);
        ShowMessage("CSV file saved successfully!");
    }

    delete csvLines;
	delete saveDlg;


}
//---------------------------------------------------------------------------

